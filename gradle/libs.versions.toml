[versions]
accompanist = "0.30.1"
apollo = "3.8.2"
coroutines = "1.7.1"
destinations = "1.8.41-beta"
junit5 = "5.9.3"
koin = "3.4.1"
koin-compose = "3.4.5"
kotlin = "1.8.21"
lifecycle = "2.6.1"
orbit = "6.0.0"
sentry = "6.21.0"

# Compose
compose = "2023.05.01"
compose-compiler = "1.4.7"

# Coverage Engine
coverage-engine = "1.0.719"

# Plugins
detekt = "1.23.0"

# Tests
kotest = "5.6.2"

[plugins]
serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }

[libraries]
# Accompanist
accompanist-placeholder = { module = "com.google.accompanist:accompanist-placeholder-material", version.ref = "accompanist" }
accompanist-systemuicontroller = { module = "com.google.accompanist:accompanist-systemuicontroller", version.ref = "accompanist" }

# AndroidX
androidx-activity = { module = "androidx.activity:activity-compose", version = "1.7.2" }
androidx-startup = { module = "androidx.startup:startup-runtime", version = "1.1.1" }

# Apollo
apollo = { module = "com.apollographql.apollo3:apollo-runtime", version.ref = "apollo" }
apollo-cache = { module = "com.apollographql.apollo3:apollo-normalized-cache-sqlite", version.ref = "apollo" }
apollo-mockserver = { module = "com.apollographql.apollo3:apollo-mockserver", version.ref = "apollo" }
apollo-test = { module = "com.apollographql.apollo3:apollo-testing-support", version.ref = "apollo" }

# Arrow
arrow = { module = "io.arrow-kt:arrow-core", version = "1.1.5" }

# Coil
coil = { module = "io.coil-kt:coil-compose", version = "2.4.0" }

# Compose
compose-animation = { module = "androidx.compose.animation:animation" }
compose-bom = { module = "androidx.compose:compose-bom", version.ref = "compose" }
compose-foundation = { module = "androidx.compose.foundation:foundation" }
compose-foundation-layout = { module = "androidx.compose.foundation:foundation-layout" }
compose-material = { module = "androidx.compose.material:material" }
compose-material3-windowsize = { module = "androidx.compose.material3:material3-window-size-class" }
compose-material-icons = { module = "androidx.compose.material:material-icons-extended" }
compose-ui = { module = "androidx.compose.ui:ui" }
compose-ui-tooling = { module = "androidx.compose.ui:ui-tooling" }

# Coroutines
coroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }
coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "coroutines" }

# DataStore
datastore = { module = "androidx.datastore:datastore", version = "1.0.0" }

# Destiantions
destinations = { module = "io.github.raamcosta.compose-destinations:animations-core", version.ref = "destinations" }
destinations-compiler = { module = "io.github.raamcosta.compose-destinations:ksp", version.ref = "destinations" }

# Desugaring
desugaring = { module = "com.android.tools:desugar_jdk_libs", version = "2.0.3" }

# Detekt
detekt-compose = { module = "io.nlopez.compose.rules:detekt", version = "0.1.7" }
detekt-compose2 = { module = "ru.kode:detekt-rules-compose", version = "1.2.2" }
detekt-formatting = { module = "io.gitlab.arturbosch.detekt:detekt-formatting", version.ref = "detekt" }

# Gradle
gradle-android = { module = "com.android.tools.build:gradle", version = "8.0.2" }
gradle-apollo = { module = "com.apollographql.apollo3:apollo-gradle-plugin", version.ref = "apollo" }
gradle-compose-multiplatform = { module = "org.jetbrains.compose:compose-gradle-plugin", version = "1.4.0" }
gradle-detekt = { module = "io.gitlab.arturbosch.detekt:detekt-gradle-plugin", version.ref = "detekt" }
gradle-kotlin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
gradle-kover = { module = "org.jetbrains.kotlinx.kover:org.jetbrains.kotlinx.kover.gradle.plugin", version = "0.6.1" }
gradle-ksp = { module = "com.google.devtools.ksp:symbol-processing-gradle-plugin", version = "1.8.21-1.0.11" }
gradle-sentry = { module = "io.sentry:sentry-android-gradle-plugin", version = "3.8.0" }
gradle-sonarqube = { module = "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin", version = "3.4.0.2513" }
gradle-updates = { module = "com.github.ben-manes:gradle-versions-plugin", version = "0.46.0" }

# Koin
koin = { module = "io.insert-koin:koin-core", version.ref = "koin" }
koin-android = { module = "io.insert-koin:koin-android", version.ref = "koin" }
koin-compose = { module = "io.insert-koin:koin-androidx-compose", version.ref = "koin-compose" }
koin-junit4 = { module = "io.insert-koin:koin-test-junit4", version.ref = "koin" }
koin-junit5 = { module = "io.insert-koin:koin-test-junit5", version.ref = "koin" }

# Kotlin
kotlin = { module = "org.jetbrains.kotlin:kotlin-stdlib", version.ref = "kotlin" }
kotlin-immutable = { module = "org.jetbrains.kotlinx:kotlinx-collections-immutable", version = "0.3.5" }

# Lifecycle
lifecycle-runtime = { module = "androidx.lifecycle:lifecycle-runtime-compose", version.ref = "lifecycle" }
lifecycle-viewmodel = { module = "androidx.lifecycle:lifecycle-viewmodel-compose", version.ref = "lifecycle" }

# Napier
napier = { module = "io.github.aakira:napier", version = "2.6.1" }

# Orbit
orbit = { module = "org.orbit-mvi:orbit-viewmodel", version.ref = "orbit" }
orbit-test = { module = "org.orbit-mvi:orbit-test", version.ref = "orbit" }

# Sentry
sentry = { module = "io.sentry:sentry-android-core", version.ref = "sentry" }
sentry-apollo = { module = "io.sentry:sentry-apollo-3", version.ref = "sentry" }
sentry-compose = { module = "io.sentry:sentry-compose-android", version.ref = "sentry" }

# Serialization
serialization = { module = "org.jetbrains.kotlinx:kotlinx-serialization-protobuf", version = "1.5.0" }

# Tink
tink = { module = "com.google.crypto.tink:tink-android", version = "1.9.0" }

# Tests
## JUnit
junit5 = { module = "org.junit.jupiter:junit-jupiter", version.ref = "junit5" }
junit5-vintage = { module = "org.junit.vintage:junit-vintage-engine", version.ref = "junit5" }

## Kotest
kotest-assertions-core = { module = "io.kotest:kotest-assertions-core", version.ref = "kotest" }
kotest-property = { module = "io.kotest:kotest-property", version.ref = "kotest" }

## MockK
mockk = { module = "io.mockk:mockk", version = "1.13.5" }

## Robolectric
robolectric = { module = "org.robolectric:robolectric", version = "4.10.3" }

## Turbine
turbine = { module = "app.cash.turbine:turbine", version = "0.13.0" }

[bundles]
# Deps for Multiplatform Core (Common, JVM & iOS)
core-common = [
    "arrow",
    "coroutines",
    "koin",
    "kotlin",
    "kotlin-immutable",
]
core-jvm = []
core-ios = []

core-common-test = [
    "coroutines-test",
    "kotest-assertions-arrow",
    "kotest-assertions-core",
    "kotest-property",
    "turbine",
]
core-jvm-test = [
    "junit5",
    "koin-junit5",
    "mockk",
]
core-ios-test = []

# Deps for Multiplatform Mobile (Common, Android & iOS)
mobile-common = [
    "arrow",
    "coroutines",
    "koin",
    "kotlin",
    "kotlin-immutable",
    "napier",
]
mobile-android = []
mobile-ios = []

mobile-common-test = [
    "coroutines-test",
    "kotest-assertions-arrow",
    "kotest-assertions-core",
    "kotest-property",
    "turbine",
]
mobile-android-test = [
    "junit5",
    "junit5-vintage",
    "koin-junit5",
    "mockk",
    "robolectric",
]
mobile-ios-test = []

# Deps for Data Preferences
data-preferences-common = [
    "serialization",
]
data-preferences-android = [
    "datastore",
    "tink",
]
data-preferences-ios = []

data-preferences-common-test = []
data-preferences-android-test = []
data-preferences-ios-test = []

# Deps for Data Remote
data-remote-common = [
    "apollo",
    "apollo-cache",
]
data-remote-android = []
data-remote-ios = []

data-remote-common-test = [
    "apollo-test",
]
data-remote-android-test = [
    "apollo-mockserver",
]
data-remote-ios-test = []

# Deps for UI
ui-common = []
ui-android = [
    "accompanist-placeholder",
    "coil",
    "compose-animation", # TODO Remove when finished Multiplatform Compose
    "compose-foundation", # TODO Remove when finished Multiplatform Compose
    "compose-foundation-layout", # TODO Remove when finished Multiplatform Compose
    "compose-material", # TODO Remove when finished Multiplatform Compose
    "compose-material-icons",
    "compose-ui", # TODO Remove when finished Multiplatform Compose
    "compose-ui-tooling", # TODO Remove when finished Multiplatform Compose
    "destinations",
    "lifecycle-runtime",
    "lifecycle-viewmodel",
    "orbit",
]
ui-ios = []

ui-common-ksp = [
    "destinations-compiler",
]

ui-common-test = []
ui-android-test = [
    "compose-ui-test",
    "koin-junit4",
    "orbit-test",
]
ui-ios-test = []

app = [
    "androidx-activity",
    "androidx-startup",
    "compose-material",
    "compose-material3-windowsize",
    "compose-material-icons",
    "destinations",
    "koin",
    "orbit",
    "sentry",
    "sentry-compose",
]
